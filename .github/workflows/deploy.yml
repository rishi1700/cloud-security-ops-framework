name: CI/CD - Cloud Security Ops Framework

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  validate-and-deploy:
    name: Validate, Build & Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      LAMBDA_DIR: phase3-threat-detection-response/lambda
      LAMBDA_ZIP: auto_remediate.zip
      FUNCTION_NAME: auto-remediate-v2

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS Credentials (for remote backend)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🧪 Dump GitHub OIDC Token (diagnostics)
        run: |
          echo "Fetching GitHub OIDC Token..."
          curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq
        env:
          ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ secrets.ACTIONS_ID_TOKEN_REQUEST_URL }}          

      - name: 🔍 Debug AWS Caller Identity
        run: |
          aws sts get-caller-identity || echo "Unable to retrieve identity"

      - name: ⚙️ Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: 🎟️ Init & Validate Terraform - Phase 1
        run: |
          terraform -chdir=phase1-infra-logging init -input=false
          terraform -chdir=phase1-infra-logging fmt -recursive
          terraform -chdir=phase1-infra-logging validate -no-color > phase1-infra-logging/validate-report.txt
        continue-on-error: true

      - name: 🎟️ Init & Validate Terraform - Phase 2
        run: |
          terraform -chdir=phase2-iam-security-services init -input=false
          terraform -chdir=phase2-iam-security-services fmt -recursive
          terraform -chdir=phase2-iam-security-services validate -no-color > phase2-iam-security-services/validate-report.txt
        continue-on-error: true

      - name: 📙 Set up Python for Lambda Packaging
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 💡 Install Lambda Dependencies (if any)
        run: |
          pip install boto3

      - name: 📦 Zip Lambda function code
        run: |
          cd $LAMBDA_DIR
          zip -r9 $LAMBDA_ZIP .

      - name: 🎟️ Init & Validate Terraform - Phase 3
        run: |
          terraform -chdir=phase3-threat-detection-response init -input=false
          terraform -chdir=phase3-threat-detection-response fmt -recursive
          terraform -chdir=phase3-threat-detection-response validate -no-color > phase3-threat-detection-response/validate-report.txt
        continue-on-error: true

      - name: 📄 Upload Terraform Validate Reports
        uses: actions/upload-artifact@v4
        with:
          name: terraform-validation-reports
          path: |
            phase1-infra-logging/validate-report.txt
            phase2-iam-security-services/validate-report.txt
            phase3-threat-detection-response/validate-report.txt

      - name: 🚀 Deploy Lambda Code to AWS
        run: |
          set -e
          if aws lambda get-function --function-name $FUNCTION_NAME; then
            echo "Function exists. Updating code..."
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://$LAMBDA_DIR/$LAMBDA_ZIP
          else
            echo "Function does not exist. Creating..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime python3.9 \
              --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-security-response-role \
              --handler index.lambda_handler \
              --zip-file fileb://$LAMBDA_DIR/$LAMBDA_ZIP
          fi